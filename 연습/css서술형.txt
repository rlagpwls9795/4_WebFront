CSS(Cascading Style Sheets) : 마크업 언어(HTML)가 실제로 화면에 표시되는 방법(모양, 색상, 크기) 등을 기술하는 언어
                              (HTML이 화면에 어떤 스타일로 보여질 지 지정하는 언어)
<style> : CSS 코드만 작성할 수 있는 영역을 제공하는 태그 

[CSS 선택자]
- 선택자 : 현재 HTML 문서 내에서 특정한 요소를 선택하는 문자 또는 문자열 
- 태그 선택자 : 현재 HTML 문서 내에 같은 태그를 선택하는 선택자 ==> 태그명{ ;}
- id 선택자(#id 속성값) : HTML 문서 내에서 id 속성값이 일치하는 요소를 선택하는 선택자
                         id 속성값은 페이지 내에서 유일해야 함(중복 X) ==> #id 속성값{ ;}
- class 선택자(.class 속성값) : HTML 문서 내에서 같은 class 속성 값을 가진 요소를 모두 선택하는 선택자
                                id는 중복X, class는 중복O ==> .class 속성값{ ;}
- 모든 선택자(*) : 모든 요소를 선택하는 선택자 (단독 또는 다른 선택자와 함께 사용 가능 
- 기본 속성 선택자 : 특정 속성이 작성된 요소를 선택하는 선택자 ==> 선택자[속성명='속성값']
- 자식 선택자 : 지정된 요소 바로 하위에 존재하는 요소를 선택하는 선택자 ==> 선택자1 > 선택자2
- 후손(자손) 선택자 : 지정된 요소의 하위에 존재하는 모든 요소를 선택하는 선택자 ==> 선택자1 선택자2
- 반응 선택자 : 사용자의 움직임에 반응하여 선택되는 선택자
        1) :active : 선택된 요소를 클릭하고 있을 때 
        2 : hover : 선택된 요소에 마우스를 올리고 내릴 때
- 상태 선택자 : 입력 양식 관련 태그 상태에 따라 선택하는 선택자
        1) :focus : 요소에 초점이 맞춰진 상태 
        2) :checked : 요소가 체크되었을 때 (radio, checkbox) 
        3) :enable : 요소가 사용 가능한 상태
        4) :disabled : 요소가 사용 불가능한 상태
- 동위 선택자 : 동위 관계(=형제 관계)에서 다음에 위치한 요소를 선택하는 선택자
        A 다음에 바로 오는 B 선택 : A + B
        A 다음에 오는 모든 요소 선택 : A ~ B
- 문자열 속성 선택자 : 속성값의 문자열을 확인하여 스타일 적용하는 방식의 선택자
        1) 선택자[속성명 ~= "특정값"] { CSS 코드; }
            -> 띄어쓰기로 구분되어있는 여러 속성 값이 작성된 속성 중
            속성 값이 특정 값을 단어로 포함하는 요소를 선택
        2) 선택자[속성명 |= "특정값"] { CSS 코드; }
            -> 속성 값이 특정 값을 단어로 포함하는 요소를 선택
              단, "-" 기호로 구분, "-" 앞의 내용이 동일해야 한다.
        3) 선택자[속성명 ^= "특정값"] { CSS 코드; }   
          (^ : 캐럿) -> 속성 값이 특정 값으로 시작하는 요소를 선택
        4) 선택자[속성명 $= "특정값"] { CSS 코드; }
            -> 속성 값이 특정 값으로 끝나는 요소를 선택
        5) 선택자[속성명 *= "특정값"] { CSS 코드; }
            -> 속성 값이 특정 값을 포함하는 요소를 선택
- 일반 구조 선택자 : 특정 요소의 자식 요소를 선택하는 선택자, 형제 관계에 있는 요소 중 특정 요소만 선택
                     * 위치를 기준으로 선택
        1) :first-child -> 형제 관계의 요소 중 첫 번째 요소
        2) :last-child -> 형제 관계의 요소 중 마지막 요소
        3) :nth-child(숫자 또는 수열) -> 형제 관계의 요소 중 숫자 번째 요소 또는 모든 수열 번째 요소
        4) :nth-last-child -> 형제 관계의 요소 중 뒤에서부터 지정된 숫자 번째 요소 또는 뒤에서부터 모든 수열 번째 요소
- 형태 구조 선택자 : 특정 요소의 자식요소를 선택하는 선택자, 형제 관계에 있는 요소 중 특정 요소만을 선택
                     * 선택된 요소를 기준으로 구분
        1) :first-of-type -> 같이 선택된 형제 요소 중 첫 번째 요소
        2) :last-of-type -> 같이 선택된 형제 요소 중 마지막 요소
        3) :nth-of-type(숫자 또는 수열) -> 같이 선택된 형제 요소 중 숫자 번째 요소 또는 모든 수열 번째 요소
                                           :nth-of-type() 앞에 *을 작성하는 경우 각각의 요소 종류 별로 수열이 적용된다
        4) :nth-last-of-type(숫자 또는 수열) -> 같이 선택된 형제 요소 중 뒤에서부터 지정된 숫자 번째 요소 또는 뒤에서부터 모든 수열 번째 요소
- 부정 선택자 : 괄호 내 선택자를 제외한 나머지 요소를 선택 ==> (선택자1:not(선택자2))
- 기타 선택자 :only-child : 특정 요소의 자식이 하나밖에 없을 때
              :only-of-type : 특정 요소의 자식 중 지정된 형태와 같은 자식 요소가 하나만 있을 경우
              :empty : 자식 노드가 없는 요소를 선택

- 선택자 우선 순위 : 기본적으로 style 태그 또는 css 파일에 작성된 순서대로 해석이 진행되지만 같은 요소에 여러 css 속성이 설정되는 경우 우선 순위 적용
        1) 동일한 우선 순위의 선택자를 이용하여 css 속성을 설정하는 경우 마지막으로 작성된 css 속성이 적용됨
        2) 여러 선택자를 이용해서 같은 요소에 css 속성을 적용하더라도 지정되는 스타일이 다른 경우 모두 반영
        1순위 : !important; 붙은 CSS 속성
        2순위 : inline-style 속성 (태그에 직접 작성하는 style 속성)
        3순위 : 아이디 선택자
        4순위 : 클래스 선택자
        5순위 : 태그 선택자

[레이아웃 스타일]
- 레이아웃 : 배치, 정리, 구성 요소를 제한된 공간에 효율적으로 배치하는 것
- 화면 배치 방법(형식) : display 속성, 요소가 화면에 어떻게 보여질 지 형식을 지정하는 속성
    - block : 화면을 수직 분할(행을 나눔)
                    + width, height 사용 O

    - inline : 화면을 수평 분할(한 행의 열(컬럼)을 나눔)
                    + width, height 사용 X

    - inline-block : inline의 수평 분할 + block의 크기 조절

    - none : 화면에 요소가 표시되지 않으나 존재는 하고 있는 상태

    - flex : 요소의 정렬되는 방향, 간격을 유연하게 처리하는 형식
- 모든 html 요소는 4가지 영역으로 구성되어 있다
    1) content : 요소의 내용
    2) padding : content와 border 사이의 영역
    3) border : content를 감싸는 테두리가 지정되는 영역
    4) margin : 다른 요소와의 간격을 지정하는 영역
- 요소 정렬 스타일
    1) float : 요소를 띄워서 좌우로 정렬
               float:left -> 왼쪽 정렬, float:right -> 오른쪽 정렬
    2) clear : float로 인해 띄워져 있는 상태를 해제
- 배치 관련 스타일 
    1) position : 요소의 위치 지정
        - position : relative;  지정된 요소 내부에 다른 요소가 상대적인 위치를 지정할 수 있도록 기준이 되게 만드는 속성
                                내부에 작성되는 요소에 위치 지정 시 top, bottom, left, right 속성을 사용할 수 있음
        - position : absolute; 기본 요소의 배치 순서를 무시하고 지정된 절대 위치에 요소를 배치함.
        - position : fixed; 항상 고정된 위치에 요소를 배치함. (화면이 움직이든 말든 항상 같은 위치)
        - position : sticky; 요소가 보여지는 화면을 벗어났을 때 화면에 스티커처럼 붙여서 고정된 위치를 가지게 만듦 (fixed의 응용 버전)
                             absolute는 body, 감싸는 영역을 기준으로 배치됨, fixed는 화면(브라우저, 뷰포트)을 기준으로 배치됨
            
            요소를 정가운데 배치하기
                1) 감싸는 요소가 position : relative
                2) 배치될 요소가 position : absolute 
                3) 배치될 요소를 사방으로 잡아 당김(top, bottom, left, right)
                4) 배치될 요소에 margin : auto; 를 추가해 감싸는 요소와의 간격을 자동으로 조정 -> 가운데 배치
    2) z-index : position 속성에 의해서 겹쳐진 요소들의 순서를 지정하는 속성

[글자 관련 스타일]
- color : 글자 색을 지정하는 스타일 
    색상명(영문) | 16진수 숫자 RGB (#fff, #ffffff) |
    rgb(255, 255, 255) | rgba(255, 255, 255, 1)  |
    hsl(360, 100, 100) | hsla(360, 100, 100, 1)

    * 16진수(0,1,2,3,4,5,6,7,8,9,A,B,C,D,E,F)
    * rgb(빛의 삼원색), hsl(색조, 채도, 밝기)
    * rgba, hsla에서 a는 투명도(0(투명)~1(불투명))
- text-decoration : 텍스트에 줄을 긋는 속성
- text-align : 내부에 작성된 글, inline 요소를 정렬, 감싸는 요소의 display가 inline인 경우 적용되지 않음
    {text-align: justify;} ==> 양쪽 정렬
- line-height : 줄 간격(장평)을 지정하는 속성
                * 줄의 높이가 글자의 크기보다 큰 경우 글자는 해당 줄 세로 가운데에 배치
 - letter-spacing : 글자 사이 간격(자간) 지정 속성               

[글꼴 관련 스타일]
- font-size : 글꼴의 크기를 지정하는 속성
    * 고정 크기 단위
    - px : 픽셀
    - pt : 포인트
    * 가변 크기 단위
    - % : 상위 요소 크기에 대한 백분율
    - em : 상위 요소의 글꼴 크기에 대한 비율
- font-weight : 글꼴의 굵기(두께)를 지정하는 속성
    - bold : 굵게(700)
    - normal : 보통(기본값, 400)
    - bolder : 부모 요소보다 두껍게
    - lighter : 부모 요소보다 얇게
    - number(100~900, 100단위) : 가중치
        - 숫자가 클수록 두꺼움
        - 폰트에서 지원하는 가중치에 따라 표현되는 굵기가 다름
    -> normal, bold만 지원하는 폰트가 있을 경우
        100~500 : normal
        600~900 : bold  로 처리
- font-style : 글꼴 모양 지정 속성
    - italic : 폰트에서 제공하는 기울어진 글자
    - oblique : 강제로 글자를 기울게 변경
- font-family : 글꼴을 지정하는 속성

[FlexBox]
FlexBox : 요소의 정렬되는 방향, 순서, 요소 간의 간격을 개발자가 수치적으로 처리하지 않아도 알아서 유연하게 처리해주는 형식
** FlexBox 이용 시 반드시 알아야 할 것
1. FlexBox의 구성
    - flex-container : 정렬이 필요한 요소를 감싸는 요소
    - item : 정렬이 필요한 요소(정렬 적용 대상)
    -> flex 관련 css 속성이 flex-container, item 구문으로 나뉘어져 있음
2. FlexBox의 축
    - 중심축 main axis
    - 교차축, 반대축 cross axis
- {display: flex;} ==> item을 감싸는 요소의 형식을 flex로 변경, item에 자동으로 지정된 margin이 사라지고 content+padding+border 영역 만큼의 크기만 가지게 됨
                       item에 width/height가 지정되어 있지 않을 경우 item 높이는 flex-container의 너비/높이와 같아짐(main-axis 방향에 따라 다름)
- flex-decoration : main-axis의 방향과 시작 위치를 지정 (row(기본값), row-reverse, column, column-reverse)
- flex-wrap : 내부 item들을 포장하는 속성, item들이 강제로 한 줄에 배치되게 할 거인지 flex-container를 벗어나면 여러 줄로 배치되게 할 것인지 지정
    - nowrap : 강제로 한 줄에 배치, 기본값 (item 크기 변경) 
    - wrap : 여러 줄로 배치
    - wrap-reverse : 여러 줄로 배치 (뒤에서부터 배치)
- flex-flow : flex-direction과 flex-wrap을 한 번에 지정하는 속성 (기본값 row nowrap)
- justify-content : main-axis 방향으로 item 정렬
    - flex-start : main-axis 시작 지점을 기준으로 정렬(기본값)
    - flex-end : main-axis 끝 지점을 기준으로 정렬
    - center : main-axis 가운데 정렬
    - space-around : main-axis 방향으로 item 주위에 일정한 크기의 공간을 추가해서 item 들이 간격을 두고 배치되도록 지정
    - space-evenly : item이 main-axis 방향으로 동일한 간격을 가지게 지정
    - space-between : 양 끝의 item을 main-axis 시작/끝 지점에 붙인 상태에서 item들이 동일한 간격을 가지게 지정
- alig-items : main-axis에 정렬된 item들을 cross-axis 방향으로 정렬하는 방법을 지정하는 속성
    - stretch : 기본값, item에 cross-axis 방향으로의 크기 지정이 없을 경우 감싸고 있는 flex-container의 크기와 같은 크기를 가지도록 늘리는 속성
    - flex-start : cross-axis의 시작 지점을 기준으로 배치
    - flex-end : cross-axis의 끝 지점을 기준으로 배치
    - center : cross-axis의 가운데 배치
    - baseline : item 내부에 있는 content가 모두 한 줄에 배치될 수 있도록 각각의 item을 cross-axis 방향으로 움직이는 속성
    - justify-content의 속성 모두 사용 가능
            flex로 요소를 정가운데 배치하기
            1) display: flex
            2) flex-decoration: row;
            3) flew-wrap: nowrap;
            4) justify-content: center;
            5) align-items: center;
- order : item이 main-axis 방향으로 배치되는 순서를 지정하는 속성 (기본값 0, 정수만 가능)
- flex-grow : item의 팽창 정도를 지정하는 속성(기본값 0), 여러 item이 지정된 경우 각각의 비율에 맞게 팽창함
- flex-shrink : item이 수축하는 정도를 지정하는 속성(기본값 1)
- flex-basis : main-axis 방향으로 item이 차지하는 크기의 비율을 지정하는 속성
- flex :  grow + shrink + basis
- align-self : 각 item별로 교차축 배치를 지정하는 속성 

============================================================================================================
HTML 코드에 <link rel="stylesheet" href="css 파일 경로"> 작성하면 css 사용 가능

- :hover{ transition-duration: 초(s);} ==> 스타일이 변하는 시간
- calc() : 계산함수
- {visibility : hidden;} ==> 요소를 투명한 상태로 표시
- vh(Viewport Height) : 화면의 높이

